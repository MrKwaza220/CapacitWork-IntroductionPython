Title: Manipulating Strings with Regular Expressions

1. How to Manipulate Strings to a Certain Format

When working with strings, you often need to transform them into a specific format or extract relevant information. Regular expressions provide a powerful way to achieve this. Here are some common operations:

Search and Replace: You can use regular expressions to search for patterns and replace them with other strings. For example, you can replace all occurrences of a word with another word in a text.

javascript
Copy code
const inputString = "Hello, world!";
const formattedString = inputString.replace(/Hello/, "Hi");
console.log(formattedString);  // Output: "Hi, world!"
Formatting Dates: You can format dates in different ways using regular expressions. For instance, you can extract and reformat a date from a string.

javascript
Copy code
const dateString = "Date: 2023-11-03";
const regex = /Date: (\d{4}-\d{2}-\d{2})/;
const match = regex.exec(dateString);
console.log(match[1]);  // Output: "2023-11-03"
2. Grouping and Capturing

Regular expressions allow you to capture specific parts of a string that match a pattern. This is achieved through grouping with parentheses. For example, to capture a date within a text:

javascript
Copy code
const dateString = "Date: 2023-11-03";
const regex = /Date: (\d{4}-\d{2}-\d{2})/;
const match = regex.exec(dateString);
console.log(match[1]);  // Output: "2023-11-03"
Save to grepper
In this example, the parentheses group the date part, and it can be accessed using match[1].

3. Assertions and Flags

Assertions and flags are additional features of regular expressions that enhance their capabilities.

Assertions:

Positive Lookahead: Checks if a pattern is followed by another pattern without including the second pattern in the match. For example, matching a word followed by "apple" without capturing "apple".

javascript
Copy code
const regex = /\w(?=apple)/;
Negative Lookahead: Checks if a pattern is not followed by another pattern. For example, matching a word that is not followed by "apple".

javascript
Copy code
const regex = /\w(?!apple)/;
Flags:

Flags are used at the end of a regular expression to control its behavior.
Common flags include i for case-insensitive matching, g for global matching, and m for multiline matching.
For example, with the g flag, you can replace all occurrences of a word in a string:

javascript
Copy code
const inputString = "apple apple apple";
const regex = /apple/g;
const replacedString = inputString.replace(regex, "orange");
console.log(replacedString);  // Output: "orange orange orange"
Save to grepper
Regular expressions, when mastered, are invaluable for text processing and manipulation. They provide the flexibility to work with strings in various formats and extract the information you need.
